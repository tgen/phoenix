{% from 'utilities/remove_files.jst' import remove_files with context %}

{% macro mm_igtx_pairoscope(tumor, aligner='bwa') %}
{% set temp_dir %}temp/{{ tumor.gltype }}/tumor_only_structural_calls/mm_igtx_pairoscope/{{ tumor.name }}{% endset %}
{% set tumor_bam %}{{ tumor.gltype }}/alignment/{{ aligner }}/{{ tumor.name }}/{{ tumor.name }}.{{ aligner }}.bam{% endset %}
{% set results_dir %}{{ tumor.gltype }}/tumor_only_structural_calls/mm_igtx_pairoscope/{{ tumor.name }}{% endset %}

- name: mm_igtx_pairoscope_{{ tumor.name }}_{{ aligner }}
  tags: [{{ tumor.gltype }}, structural_caller, pairoscope, {{ tumor.name }}]
  tags: [pairoscope, mm_igtx_calling, {{ tumor.gltype }}]
  methods: >
    Myeloma specific calling of immunoglobulin translocations for {{ tumor.name }} ({{ aligner }})
    were called with {{ constants.tools.pairoscope.verbose }}.
  input:
    - {{ tumor_bam }}
  output:
    - {{ results_dir }}/{{ tumor.name }}.{{ aligner }}_pairoscope_igtx.png
    - {{ results_dir }}/{{ tumor.name }}.{{ aligner }}_pairoscope_igtx_discordantTable.txt
    - {{ results_dir }}/{{ tumor.name }}.{{ aligner }}_pairoscope_igtx_calls.txt
  cpus: 1
  mem: 4G
  walltime: "4:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.pairoscope.module }}
    module load {{ constants.tools.python_3_7_2.module }}

    {# Purge any existing run files prior to starting #}
    rm -r "{{ temp_dir }}" || true
    mkdir -p "{{ temp_dir }}"
    mkdir -p "{{ results_dir }}"

    # Run pairoscope process
    pairoscope -q 0 -m 1000000 -H 1400 -W 1024 -u 2000 -l 200 \
      -o {{ results_dir }}/{{ tumor.name }}.{{ aligner }}_pairoscope_igtx.png \
      {{ tumor_bam }} chr2 88750483 90261139 \
      {{ tumor_bam }} chr4 1798273 1998273 \
      {{ tumor_bam }} chr6 41632262 42332262 \
      {{ tumor_bam }} chr8 124987758 129487754 \
      {{ tumor_bam }} chr8 142918584 143925832 \
      {{ tumor_bam }} chr11 68732532 69685232 \
      {{ tumor_bam }} chr12 3690834 4690834 \
      {{ tumor_bam }} chr14 105533663 106881350 \
      {{ tumor_bam }} chr16 78096103 79950000 \
      {{ tumor_bam }} chr20 39671358 40971360 \
      {{ tumor_bam }} chr22 21995603 23057822 2> {{ temp_dir }}/{{ tumor.name }}.{{ aligner }}_pairoscope_igtx_discordantReads.txt

    numLines=$(grep -v "Non-matching mate orientation." -c {{ temp_dir }}/{{ tumor.name }}.{{ aligner }}_pairoscope_igtx_discordantReads.txt || :)
    if [[ $numLines -gt 0 ]]; then
      grep -v "Non-matching mate orientation." {{ temp_dir }}/{{ tumor.name }}.{{ aligner }}_pairoscope_igtx_discordantReads.txt |\
      gawk -v var1="{{ tumor.rgsm }}" 'BEGIN{OFS="\t" ; print "Specimen", "ChrA", "PositionA", "ChrB", "PositionB"}{print var1, $1, $2, $3, $4}' > \
      {{ results_dir }}/{{ tumor.name }}.{{ aligner }}_pairoscope_igtx_discordantTable.txt
    else
      echo $'Specimen\tChrA\tPositionA\tChrB\tPositionB' > {{ results_dir }}/{{ tumor.name }}.{{ aligner }}_pairoscope_igtx_discordantTable.txt
    fi

    python ${JS_PIPELINE_PATH}/required_scripts/{{ constants.phoenix.pairoscope_mm_igtx_calling_script }} \
      --input_file {{ results_dir }}/{{ tumor.name }}.{{ aligner }}_pairoscope_igtx_discordantTable.txt \
      --specimen {{ tumor.rgsm }} \
      --output_file {{ results_dir }}/{{ tumor.name }}.{{ aligner }}_pairoscope_igtx_calls.txt \
      --window 2000 \
      --window_min 100 \
      {% if pairoscope_call_requirement is defined %}
      --call_requirement {{ pairoscope_call_requirement }}
      {% else %}
      --call_requirement 4
      {% endif %}

{% endmacro %}


{% macro mm_igtx_gammit(tumor, aligner='bwa') %}
{% set tumor_bam %}{{ tumor.gltype }}/alignment/{{ aligner }}/{{ tumor.name }}/{{ tumor.name }}.{{ aligner }}.bam{% endset %}
{% set results_dir %}{{ tumor.gltype }}/tumor_only_structural_calls/mm_igtx_gammit/{{ tumor.name }}{% endset %}
{% set temp_dir %}temp/{{ tumor.gltype }}/tumor_only_structural_calls/mm_igtx_gammit/{{ tumor.name }}{% endset %}

- name: discordant_loci_extraction_{{ tumor.name }}
  tags: [assembly,]
  input: {{ tumor_bam }}
  output: 
    - {{ results_dir }}/{{ tumor.name }}_list_of_fastqs.txt
    - {{ results_dir }}/{{ tumor.name }}_fastqs.tar.gz
  walltime: "12:00:00"
  cpus: 4
  mem: 8G
  cmd: |
    set -eu
    set -o pipefail

    {# Purge any existing run files prior to starting #}
    rm -r "{{ temp_dir }}" || true
    rm -r "{{ results_dir }}" || true
    mkdir -p "{{ temp_dir }}"
    mkdir -p "{{ results_dir }}"

    module load {{ constants.tools.python_3_7_2.module }}
    module load {{ constants.tools.dle.module }}

    dle.py \
      --alignment-file {{ tumor_bam }} \
      --reference-genome {{ constants.phoenix.reference_fasta }} \
      --regions-bed-file {{ constants.phoenix.igtx_gene_regions }} \
      --igs-regions-bed-file {{ constants.phoenix.igtx_regions }} \
      --dir-out-fq {{ results_dir }} \
      --prefix-fq {{ tumor.name }} \
      --min-mapq 0 \
      --threads 4 \
      --min-tuples 3 \
      --left-position-clustering-only True \
      --min-reads-per-cluster 3 \
      --clustering-distance 600

    {# Concatenating the list of fastqs to reduce downstream processing #}
    cat {{ results_dir }}/*_list_fastq_files.txt > {{ results_dir }}/{{ tumor.name }}_list_of_fastqs.txt
    find {{ results_dir }}/ -name '*_list_fastq_*.txt' \! -name '{{ tumor.name }}_list_of_fastqs.txt' -delete

    tar -czf {{ results_dir }}/{{ tumor.name }}_fastqs.tar.gz {{ results_dir }}/*.fastq.gz


- name: trinity_assembly_{{ tumor.name }}
  tags: [assembly,]
  input: 
    - {{ results_dir }}/{{ tumor.name }}_list_of_fastqs.txt
    - {{ results_dir }}/{{ tumor.name }}_fastqs.tar.gz
  output:
    - {{ results_dir }}/{{ tumor.name }}_Trinity_All_Clusters_sorted.bam
    - {{ results_dir }}/{{ tumor.name }}_ContigResults.txt
    - {{ results_dir }}/{{ tumor.name }}_FilteredContigResults.txt
    - {{ results_dir }}/{{ tumor.name }}_DEX_IgTx_GA_Summary.txt
  walltime: "24:00:00"
  cpus: 4
  mem: 10G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.bwa.module }}
    module load {{ constants.tools.samtools.module }}
    {# star_fusion loads Trinity and it's dependencies in the background, ensuring compatibility #}
    module load {{ constants.tools.star_fusion.module }}
    trin_path=$(dirname `which Trinity`)

    {# Build a list of fastqs to iterate through #}
    fqr1arr=()
    fqr2arr=()
    for fq in `cut -f1 {{ results_dir }}/{{ tumor.name }}_list_of_fastqs.txt`
    do
      fqr1arr+=("${fq}")
    done
    for fq in `cut -f2 {{ results_dir }}/{{ tumor.name }}_list_of_fastqs.txt`
    do
      fqr2arr+=("${fq}")
    done

    {# Submit a trinity job for each pair of fastqs #}
    assemErrors=0
    assemBams=()
    for i in ${!fqr1arr[@]}
    do
      leftfq=${fqr1arr[i]}
      rightfq=${fqr2arr[i]}
      chrRegion=$(echo ${leftfq#{{ results_dir }}/{{ tumor.name }}_} | cut -d'_' -f1-3)
      cluster=$(echo ${leftfq#{{ results_dir }}/{{ tumor.name }}_} | cut -d'_' -f4-6)
      {# Pulling the needed fastqs out of the tar.gz #}
      tar -xzf {{ results_dir }}/{{ tumor.name }}_fastqs.tar.gz ${leftfq}
      tar -xzf {{ results_dir }}/{{ tumor.name }}_fastqs.tar.gz ${rightfq}
      Trinity \
        --seqType fq \
        --left $leftfq \
        --right $rightfq \
        --run_as_paired \
        --output {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity \
        --trimmomatic \
        --no_normalize_reads \
        --CPU 4 \
        --max_memory 10G || error=true
      if [[ -v error ]]
      then
        assemErrors=$(expr $assemErrors + 1)
        rm ${leftfq} ${rightfq}
        unset error
      else
        ${trin_path}/util/TrinityStats.pl {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/Trinity.fasta

        sed -i "s/^>/>{{ tumor.name }}_${chrRegion}_${cluster}:/g" {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/Trinity.fasta

        bwa mem \
          -t 4 \
          -Y \
          -K 100000000 \
          -o {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/trinbwafile.sam \
          {{ constants.phoenix.bwa_index }} \
          {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/Trinity.fasta

        samtools view \
          -@ 4 \
          -b {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/trinbwafile.sam |\
        samtools sort \
          -o {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/{{ tumor.name }}_${chrRegion}_${cluster}_sorted.bam

        samtools index -@ 4 {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/{{ tumor.name }}_${chrRegion}_${cluster}_sorted.bam

        mkdir -p {{ results_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}
        mv {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/Trinity.fasta {{ results_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/Trinity.fasta
        bwa index {{ results_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/Trinity.fasta
        bwa mem \
          -t 4 \
          -Y \
          -K 100000000 \
          -o {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/ReadstoContigs.sam \
          {{ results_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/Trinity.fasta \
          ${leftfq} ${rightfq}

        samtools view -b {{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/ReadstoContigs.sam |\
        samtools sort -o {{ results_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/{{ tumor.name }}_${chrRegion}_${cluster}_ReadstoContigs.bam
        samtools index {{ results_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/{{ tumor.name }}_${chrRegion}_${cluster}_ReadstoContigs.bam

        assemBam+=("{{ temp_dir }}/{{ tumor.name }}_${chrRegion}_${cluster}/trinity/{{ tumor.name }}_${chrRegion}_${cluster}_sorted.bam")
        rm ${leftfq} ${rightfq}
      fi
      i=$(expr $i + 1)
    done

    echo "$assemErrors out of {{ '${#fqr1arr[@]}' }} fastq pairs failed to assemble"

    if [ "$assemErrors" -ne {{ '"${#fqr1arr[@]}"' }} ]
    then
      echo "Merging assembled bams"
      samtools merge \
        -@ 4 \
        -f \
        {{ results_dir }}/{{ tumor.name }}_Trinity_All_Clusters_sorted.bam \
        ${assemBam[*]}

      samtools index -@ 4 {{ results_dir }}/{{ tumor.name }}_Trinity_All_Clusters_sorted.bam

      python3 ${JS_PIPELINE_PATH}/required_scripts/{{ constants.phoenix.process_assembled_bam }} \
        --input_bam {{ results_dir }}/{{ tumor.name }}_Trinity_All_Clusters_sorted.bam \
        --fastq_dir {{ results_dir }} \
        --contig 125 \
        --reads 3 \
        --window 25 \
        --pairoscope_bed_file {{ constants.phoenix.igtx_pairoscope_regions }} \
        --output_path {{ results_dir }} \
        --specimen {{ tumor.name }} \
        --bam_path {{ results_dir }}

      mv {{ results_dir }}/DEX_IgTx_GA_Summary.txt {{ results_dir }}/{{ tumor.name }}_DEX_IgTx_GA_Summary.txt
      if [ -f {{ results_dir }}/ContigResults.txt ]
      then
        mv {{ results_dir }}/ContigResults.txt {{ results_dir }}/{{ tumor.name }}_ContigResults.txt
      fi
      if [ -f {{ results_dir }}/FilteredContigResults.txt ]
      then
        mv {{ results_dir }}/FilteredContigResults.txt {{ results_dir }}/{{ tumor.name }}_FilteredContigResults.txt
      fi
    fi

    if [ ! -f {{ results_dir }}/{{ tumor.name }}_DEX_IgTx_GA_Summary.txt ]
    then
      echo "Specimen" > {{ results_dir }}/{{ tumor.name }}_DEX_IgTx_GA_Summary.txt
      echo "{{ tumor.name }}" >> {{ results_dir }}/{{ tumor.name }}_DEX_IgTx_GA_Summary.txt
    fi
    {# Touching output files to ensure their existence, even if empty #}
    touch {{ results_dir }}/{{ tumor.name }}_ContigResults.txt
    touch {{ results_dir }}/{{ tumor.name }}_FilteredContigResults.txt
    touch {{ results_dir }}/{{ tumor.name }}_Trinity_All_Clusters_sorted.bam


{% endmacro %}


{% macro mm_igtx_manta(pair, aligner='bwa') %}
{% set tumor_only_temp %}temp/tumor_only/control_data_files/{{ pair.normal.assayCode }}{% endset %}
{% set normal_bam %}{{ tumor_only_temp }}/{{ pair.normal.pathToBam | basename }}{% endset %}
{% set tumor_bam %}{{ pair.tumor.gltype }}/alignment/{{ aligner }}/{{ pair.tumor.name }}/{{ pair.tumor.name }}.{{ aligner }}.bam{% endset %}
{% set results_dir %}{{ pair.gltype }}/tumor_only_structural_calls/mm_igtx_manta/{{ pair.name }}{% endset %}
{% set temp_dir %}temp/{{ pair.gltype }}/tumor_only_structural_calls/mm_igtx_manta/{{ pair.name }}{% endset %}
{% set summary_samtools_stats %}{{ pair.gltype }}/alignment/{{ aligner }}/{{ pair.tumor.name }}/stats/{{ pair.tumor.name }}.{{ aligner }}.bam_samtools_insertSize_summary.tsv{% endset %}

- name: mm_igtx_manta_{{ pair.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, tumor_only, structural_caller, manta, {{ pair.name }}]
  methods: >
    somatic structural variants and indels for {{ pair.name }} ({{ aligner }})
    were called with {{ constants.tools.manta.verbose }}.
  reset: prepare_tumor_only_{{ pair.normal.name }}
  input:
    - {{ normal_bam }}
    - {{ tumor_bam }}
  output:
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz.tbi
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.candidateSV.vcf.gz
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.candidateSV.vcf.gz.tbi
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.diploidSV.vcf.gz
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.diploidSV.vcf.gz.tbi
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.somaticSV.vcf.gz
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.somaticSV.vcf.gz.tbi
  cpus: 20
  mem: 20G
  walltime: "24:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.manta_tgen.module }}
    module load {{ constants.tools.htslib.module }}
    module load {{ constants.tools.python_2_7_15.module }}

    {# Purge any existing run files prior to starting #}
    rm -r "{{ temp_dir }}" || true
    mkdir -p "{{ temp_dir }}"

    {#
    # In order to restrict calling to only the specified regions
    # Manta requires a bed file (that has been bgzipped and indexed
    # with tabix). Here we generate that file on the fly, store in
    # the run dir, and pass the path to Manta.
    #}
    MANTA_BED="{{ temp_dir }}/callRegions.bed"
    TAB=$'\t'
    cat <<EOF > "${MANTA_BED}"
    {% for contig in constants.phoenix.calling_contigs %}
    {{ contig.contig }}${TAB}0${TAB}{{ contig.length }}
    {% endfor %}
    EOF

    bgzip -f "${MANTA_BED}"
    tabix -f -p bed "${MANTA_BED}.gz"

    {#
    # Some settings are only configurable via tha ini file. Here
    # we generate this ini file and save it to the run dir.
    #}
    MANTA_CONFIG="{{ temp_dir }}/config.ini"
    cat <<EOF > "${MANTA_CONFIG}"
    [manta]
    enableRemoteReadRetrievalForInsertionsInCancerCallingModes = 1
    minMapq = 0
    maxDepthFactor = 12
    EOF

    {# Build the Manta run file #}
    configManta.py \
      {% if pair.gltype == 'exome' %}
      --exome \
      {% endif %}
      --callRegions "${MANTA_BED}.gz" \
      --config "${MANTA_CONFIG}" \
      --scanSizeMb 5 \
      --callMemMb 50 \
      --normalBam "{{ normal_bam }}" \
      --tumorBam "{{ tumor_bam }}" \
      --referenceFasta "{{ constants.phoenix.reference_fasta }}" \
      --runDir "{{ temp_dir }}"

    {# Execute on the local machine with 19 parallel jobs #}
    "{{ temp_dir }}/runWorkflow.py" -m local -j 19

    {# Save all the vcs in the sample dir #}
    mkdir -p "{{ results_dir }}" || true

    mv "{{ temp_dir }}/results/variants/candidateSmallIndels.vcf.gz" "{{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz"
    mv "{{ temp_dir }}/results/variants/candidateSmallIndels.vcf.gz.tbi" "{{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz.tbi"
    mv "{{ temp_dir }}/results/variants/candidateSV.vcf.gz" "{{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.candidateSV.vcf.gz"
    mv "{{ temp_dir }}/results/variants/candidateSV.vcf.gz.tbi" "{{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.candidateSV.vcf.gz.tbi"
    mv "{{ temp_dir }}/results/variants/diploidSV.vcf.gz" "{{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.diploidSV.vcf.gz"
    mv "{{ temp_dir }}/results/variants/diploidSV.vcf.gz.tbi" "{{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.diploidSV.vcf.gz.tbi"
    mv "{{ temp_dir }}/results/variants/somaticSV.vcf.gz" "{{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.somaticSV.vcf.gz"
    mv "{{ temp_dir }}/results/variants/somaticSV.vcf.gz.tbi" "{{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.somaticSV.vcf.gz.tbi"


- name: mm_igtx_manta_flag_{{ pair.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, tumor_only, manta, flag, {{ pair.name }}]
  reset: prepare_tumor_only_{{ pair.normal.name }}
  input:
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.somaticSV.vcf.gz
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.somaticSV.vcf.gz.tbi
    - {{ tumor_bam }}
    - {{ normal_bam }}
    - {{ summary_samtools_stats }}
  output:
    - {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz
    - {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz.tbi
    - {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz
    - {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz.tbi
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}_mantaTxCalls.txt
  cpus: 4
  mem: 4G
  walltime: "12:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.bcftools.module }}
    module load {{ constants.tools.python_3_7_2.module }}
    module load {{ constants.tools.bedtools.module }}
    module load {{ constants.tools.transparser.module }}

    {# Ensuring that the output dir exists for bcftools filter #}
    mkdir -p {{ temp_dir }}/results/variants

    {# filtering somatic vcf by PASS #}
    bcftools filter -i 'FILTER == "PASS"' -O z -o {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.somaticSV.vcf.gz
    bcftools index --threads 4 --tbi --force {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz

    {# Capturing the insert_size and its standard deviation from summary samtools stats file #}
    INSERT_SIZE=$(cat {{ summary_samtools_stats }} | tail -n 1 | cut -f9 )
    STD_IS=$(cat {{ summary_samtools_stats }} | tail -n 1 | cut -f11 )
    echo -e "----------------"
    echo ${INSERT_SIZE}
    echo ${STD_IS}
    echo -e "----------------"

    {# adding fields and flags to pass.vcf.gz file #}
    python3 ${JS_PIPELINE_PATH}/required_scripts/{{ constants.phoenix.manta_prepare_sv_vcf }} \
      -p 4 \
      -i {{ temp_dir }}/results/variants/somaticSV.pass.vcf.gz \
      -t {{ tumor_bam }} \
      -n {{ normal_bam }} \
      --tumor-name {{ pair.tumor.rgsm }} \
      --insert-size ${INSERT_SIZE} \
      --sigma ${STD_IS} \
      --minmapq 0 \
      --output {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf \
      --logfile {{ temp_dir }}/results/variants/log_prepare_sv_vcf.txt

    bcftools filter \
      -i "TRA==1 && ( PR[1:1]>=5 || SR[1:1]>=5 || (PR[1:1]+SR[1:1])>=5 ) && (RCDIS1[1:0]>3 && RCDIS2[1:0]>3 )" \
      -O z \
      -o {{ temp_dir }}/results/variants/translocations.pass.flag.vcf.gz \
      {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf

    bcftools index --threads 2 --tbi --force {{ temp_dir }}/results/variants/translocations.pass.flag.vcf.gz

    bash transParser.sh \
      --bed-genes {{ constants.phoenix.igtx_gene_regions }} \
      --bed-igs {{ constants.phoenix.igtx_regions }} \
      --vcf {{ temp_dir }}/results/variants/translocations.pass.flag.vcf.gz \
      --samplename {{ pair.tumor.rgsm }} \
      --threads 2 \
      --dirtemp {{ temp_dir }} \
      --dirout {{ results_dir }} \
      --tabfilename {{ pair.name }}.{{ aligner }}_mantaTxCalls.txt \
      --min-reads 5

    {# compress vcf to vcf.gz #}
    bcftools view --threads 4 -O z -o {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf
    bcftools index --threads 4 --tbi --force {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz


- name: mm_igtx_manta_annotate_{{ pair.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, tumor_only, manta, flag, gene, annotation, {{ pair.name }}]
  reset: predecessors
  input:
    - {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz
    - {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz.tbi
  output:
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.somaticSV.pass.vcf.gz
    - {{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.somaticSV.pass.vcf.gz.tbi
  cpus: 4
  mem: 16G
  walltime: "12:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.bcftools.module }}
    module load {{ constants.tools.python_3_7_2.module }}
    module load {{ constants.tools.bedtools.module }}

    mkdir -p {{ temp_dir }}/pybedtools/ || true

    python ${JS_PIPELINE_PATH}/required_scripts/{{ constants.phoenix.manta_gene_annotation_parallel }} \
      -a {{ constants.phoenix.delly_annotation }} \
      -i {{ temp_dir }}/results/variants/somaticSV.pass.flag.vcf.gz \
      -o {{ temp_dir }}/results/variants/somaticSV.pass.flag.anno.vcf \
      --threads 4 \
      --tempdir {{ temp_dir }}/pybedtools/

    bcftools view --threads 4 -O z -o {{ temp_dir }}/results/variants/somaticSV.pass.flag.anno.vcf.gz {{ temp_dir }}/results/variants/somaticSV.pass.flag.anno.vcf
    bcftools index --threads 4 --tbi --force {{ temp_dir }}/results/variants/somaticSV.pass.flag.anno.vcf.gz

    {# Save all the vcf in the sample's dir results #}
    mv "{{ temp_dir }}/results/variants/somaticSV.pass.flag.anno.vcf.gz" "{{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.somaticSV.pass.vcf.gz"
    mv "{{ temp_dir }}/results/variants/somaticSV.pass.flag.anno.vcf.gz.tbi" "{{ results_dir }}/{{ pair.name }}.{{ aligner }}.manta.somaticSV.pass.vcf.gz.tbi"

    {# Remove the remaining files #}
    {% set task %}mm_igtx_manta_annotate_{{ pair.name }}_{{ aligner }}{% endset %}
    {% set directory %}{{ temp_dir }}{% endset %}
    {{- remove_files(directory,none,task) }}


{% endmacro %}


{% macro mm_igtx_summarize(sample, aligner='bwa') %}

{% set control = {} %}
{% if controlDataFiles is defined %}
  {% if controlDataFiles|selectattr('assayCode', 'eq', sample.assayCode)|first is defined %}
    {% do control.update(controlDataFiles|selectattr('assayCode', 'eq', sample.assayCode)|first) %}
  {% endif %}
{% endif %}

{% set results_dir %}{{ sample.gltype }}/tumor_only_structural_calls/mm_igtx_summary/{{ sample.name }}{% endset %}
{% set gammit_path %}{{ sample.gltype }}/tumor_only_structural_calls/mm_igtx_gammit/{{ sample.name }}/{{ sample.name }}_DEX_IgTx_GA_Summary.txt{% endset %}
{% set pairoscope_path %}{{ sample.gltype }}/tumor_only_structural_calls/mm_igtx_pairoscope/{{ sample.name }}/{{ sample.name }}.{{ aligner }}_pairoscope_igtx_calls.txt{% endset %}

{% if control.pathToBam is defined %}
  {% set manta_path %}{{ sample.gltype }}/tumor_only_structural_calls/mm_igtx_manta/{{ sample.name }}/{{ sample.name }}.{{ aligner }}_mantaTxCalls.txt{% endset %}
{% endif %}

- name: summarize_mm_igtx_{{ sample.name }}
  tags: [{{ sample.gltype }}, {{ sample.name }}, mm_igtx]
  input:
    {% if control.pathToBam is defined %}
    - {{ manta_path }}
    {% endif %}
    - {{ gammit_path }}
    - {{ pairoscope_path }}
  output: {{ results_dir }}/{{ sample.name }}_mm_igtx_summary.txt
  walltime: "24:00:00"
  cpus: 2
  mem: 4G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.R.module }}

    mkdir -p {{ results_dir }}

    Rscript ${JS_PIPELINE_PATH}/required_scripts/{{ constants.phoenix.summarize_mm_igtx_Rscript }} \
        -p {{ pairoscope_path }} \
        {% if control.pathToBam is defined %}
        -m {{ manta_path }} \
        {% endif %}
        -g {{ gammit_path }} \
        -o {{ results_dir }}/{{ sample.name }}_mm_igtx_summary.txt \
        -c 2 \
        -s {{ sample.name }}

{% endmacro %}
