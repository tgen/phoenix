{% from 'utilities/remove_files.jst' import remove_files with context %}
{% from 'modules/qc/stats2json.jst' import stats2json with context %}
{% from 'modules/qc/main.jst' import bam_qc with context %}
{% from 'utilities/bam_to_cram.jst' import bam_to_cram with context %}
{% from 'utilities/read_group_line.jst' import read_group_line %}

# Run Single cell analysis of 10x Genomics 3' and 5' scRNAseq assays using starSOLO

{% macro starsolo(files) %}

{% set sample = files[0] %}

{% set alignment_outdir %}{{ sample.gltype }}/alignment/starSOLO/{{ sample.name }}{% endset %}
{% set metrics_output %}{{ alignment_outdir }}/stats/{{ sample.name }}.starSOLO.bam.Barcodes.stats{% endset %}
{% set results_dir %}{{ sample.gltype }}/expression_estimates/starSOLO/{{ sample.name }}{% endset %}
{% set temp_dir %}temp/{{ sample.gltype }}/expression_estimates/starSOLO/{{ sample.name }}{% endset %}
{% set task %}starsolo_count_{{ sample.name }}{% endset %}
{% set json %}{{ alignment_outdir }}/stats/{{ sample.name }}.starSOLO.bam.Barcodes.stats.json{% endset %}
{% set chemistry = constants.phoenix.scrna_chemistry_options[sample.assayCode] | default(constants.phoenix.scrna_chemistry_options['unknown']) %}

{# Local Temp Variables #}
{% set cb_umi_list = [] %}
{% set cdna_list = [] %}
{% set rglinelist = [] %}
{% for fq in files|selectattr('fastqCode', 'eq', 'R1') %}
  {% do cb_umi_list.append(fq.basename) %}
  {% do rglinelist.append(read_group_line(fq, format='singleCellRNA')) %}
{% endfor %}
{% for fq in files|selectattr('fastqCode', 'eq', 'R2') %}
  {% do cdna_list.append(fq.basename) %}
{% endfor %}

- name: starsolo_count_{{ sample.name }}
  tags: [{{ sample.gltype }}, single_cell, starsolo_count, {{ sample.name }}]
  methods: >
    Alignment and quantification for {{ sample.name }} was performed with
    {{ constants.tools.star.verbose }} using the genome index.
  reset: predecessors
  input:
  {% for fq in files %}
    - temp/fastqs/{{ fq.basename }}
  {% endfor %}
  output:
    - {{ alignment_outdir }}/{{ sample.name }}.starSOLO.bam
    - {{ alignment_outdir }}/{{ sample.name }}.starSOLO.bam.bai
    - {{ metrics_output }}
    - {{ alignment_outdir }}/stats/{{ sample.name }}.starSOLO.bam.Log.final.out
  cpus: 20
  mem: 120G
  walltime: "48:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.star.module }}
    module load {{ constants.tools.samtools.module }}
    {% if sample.fileType == "fasterq" %}
      export PetaLinkMode="{{ constants.tools.petagene.PetaLinkMode }}"
      module load {{ constants.tools.petagene.module }}
    {% endif %}

    rm -r "{{ temp_dir }}" || true
    mkdir -p "{{ temp_dir }}"
    mkdir -p "{{ results_dir }}"
    mkdir -p "{{ alignment_outdir }}/stats"

    {% for fq in files %}
    ln -rs "temp/fastqs/{{ fq.basename }}" "{{ temp_dir }}/{{ fq.basename }}"
    {% endfor %}

    {#
    STAR genome index and related junction database hardcoded to 100bp read length
    #}
    ( cd {{ temp_dir }} && STAR \
      --runMode alignReads \
      --twopassMode Basic \
      --runThreadN 19 \
      --genomeDir {{ constants.phoenix.star_indices_path }}/100bpReads \
      --genomeLoad NoSharedMemory \
      --sjdbOverhang 99 \
      --readFilesType Fastx \
      --readFilesIn {{ cdna_list|join(',') }} {{ cb_umi_list|join(',') }} \
      --readFilesCommand zcat \
      --outFileNamePrefix {{ sample.name }}_ \
      --outSAMtype BAM SortedByCoordinate \
      --outSAMmode Full \
      --outSAMunmapped Within KeepPairs \
      --outSAMmapqUnique 255 \
      --outSAMattributes NH HI AS nM CR CY UR UY CB UB sM \
      --outSAMattrRGline {{ rglinelist|join(' , ') }} \
      --soloType CB_UMI_Simple \
      --soloCBwhitelist "{{ chemistry.cell_barcode_whitelist_file }}" \
      --soloCBstart 1 \
      --soloCBlen 16 \
      --soloUMIstart 17 \
      --soloUMIlen "{{ chemistry.umi_length }}" \
      --soloBarcodeReadLength 0 \
      --soloCBmatchWLtype 1MM_multi_pseudocounts \
      --soloStrand {{ sample.rnaStrandDirection }} \
      --soloFeatures Gene SJ GeneFull \
      --soloUMIdedup 1MM_All \
      --soloUMIfiltering MultiGeneUMI \
      --soloOutFileNames Solo.out/ {{ sample.name }}.starSOLO.features.tsv {{ sample.name }}.starSOLO.barcodes.tsv {{ sample.name }}.starSOLO.matrix.mtx \
      --soloCellFilter CellRanger2.2 5000 0.99 10 )

    # Update permissions so files are readable by all users (first make all folders executable recursively so they can be navigated, then make all files readable)
    chmod -R a+X {{ temp_dir }}/{{ sample.name }}_Solo.out
    chmod -R +r {{ temp_dir }}/{{ sample.name }}_Solo.out

    # Move results to results directory
    mv {{ temp_dir }}/{{ sample.name }}_Aligned.sortedByCoord.out.bam {{ alignment_outdir }}/{{ sample.name }}.starSOLO.bam
    samtools index -@ 10 {{ alignment_outdir }}/{{ sample.name }}.starSOLO.bam

    mv {{ temp_dir }}/{{ sample.name }}_Solo.out/Barcodes.stats {{ metrics_output }}
    mv {{ temp_dir }}/{{ sample.name }}_Log.final.out {{ alignment_outdir }}/stats/{{ sample.name }}.starSOLO.bam.Log.final.out

    mv {{ temp_dir }}/{{ sample.name }}_Solo.out/* {{ results_dir }}/

  {{ bam_to_cram(sample, aligner='starSOLO') }}

  {{- bam_qc(sample, aligner='starSOLO') }}

  {{- stats2json(sample.gltype, sample.name, task, metrics_output, json, "starsolo_metrics", sample_name=sample.name, library_name=sample.rglb) }}

{% endmacro %}
