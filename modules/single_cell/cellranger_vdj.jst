{% from 'utilities/remove_files.jst' import remove_files with context %}
{% from 'modules/qc/stats2json.jst' import stats2json with context %}
{% from 'modules/qc/main.jst' import bam_qc with context %}

# Run 10X Cell Ranger VDJ assembly pipeline

{% macro cellranger_vdj(files) %}

{% set sample = files[0] %}

{% set outdir %}{{ sample.gltype }}/vdj_assembly/cellranger_vdj/{{ sample.name }}{% endset %}
{% set metrics_output %}{{ outdir }}/stats/{{ sample.name }}.cellranger_vdj.bam.metrics_summary.csv{% endset %}
{% set temp_dir %}temp/{{ sample.gltype }}/vdj_assembly/cellranger_vdj/{{ sample.name }}{% endset %}
{% set cellranger_out %}{{ temp_dir }}/{{ sample.name }}/outs{% endset %}
{% set task %}cellranger_vdj_{{ sample.name }}{% endset %}
{% set json %}{{ outdir }}/stats/{{ sample.name }}.cellranger_vdj.bam.metrics_summary.json{% endset %}

{% set samples_list = [] %}

- name: cellranger_vdj_{{ sample.name }}
  tags: [{{ sample.gltype }}, single_cell, cellranger_vdj, {{ sample.name }}]
  methods: >
    T-cell and B-cell VDJ assembly for {{ sample.name }} was performed with
    {{ constants.tools.cellranger.verbose }} using the included reference package.
  reset: predecessors
  input:
  {% for fq in files %}
   - temp/fastqs/{{ fq.basename }}
  {% endfor %}
  output:
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig_annotations.bed
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig_annotations.csv
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig_annotations.json
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig.bam
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig.bam.bai
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig.fasta
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig.fasta.fai
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig.fastq
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.cell_barcodes.json
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.clonotypes.csv
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.concat_ref.bam
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.concat_ref.bam.bai
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.concat_ref.fasta
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.concat_ref.fasta.fai
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.consensus_annotations.csv
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.consensus.bam
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.consensus.bam.bai
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.consensus.fasta
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.consensus.fasta.fai
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.filtered_contig_annotations.csv
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.filtered_contig.fasta
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.filtered_contig.fastq
    - {{ metrics_output }}
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.vloupe
    - {{ outdir }}/stats/{{ sample.name }}.cellranger_vdj.bam.web_summary.html
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.airr_rearrangement.tsv
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.vdj_contig_info.pb
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.donor_regions.fa
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.regions.fa
    - {{ outdir }}/{{ sample.name }}.cellranger_vdj.reference.json
  cpus: 20
  mem: 80G
  walltime: "48:00:00"
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.cellranger.module }}
    {% if sample.fileType == "fasterq" %}
      export PetaLinkMode="{{ constants.tools.petagene.PetaLinkMode }}"
      module load {{ constants.tools.petagene.module }}
    {% endif %}

    rm -r "{{ temp_dir }}" || true
    mkdir -p "{{ temp_dir }}"
    mkdir -p "{{ outdir }}/stats"

    {% for fq in files %}
      {% set fq_bc = fq.rgbc.split('-') %}
      {% set fq_name %}{{ fq.name }}_{{ fq.rgpu[:-2] }}_{{ fq_bc[0] }}{% endset %}
      {% set fq_new %}{{ fq_name }}_S1{% endset %}
      {% do samples_list.append(fq_name) %}
      ln -rs "temp/fastqs/{{ fq.basename }}" "{{ temp_dir }}/{{ fq.basename | replace(fq_name, fq_new) }}"
    {% endfor %}

    {#
    # Cell Ranger recommended settings online are at least 8 cores and 6Gb of RAM per core
    # We are using 16 cores and therefore a 96Gb RAM pool is recommended
    #}
    ( cd {{ temp_dir }} && cellranger vdj \
        --localcores 20 \
        --localmem 80 \
        --id "{{ sample.name }}" \
        --fastqs . \
        --reference "{{ constants.phoenix.cellranger_vdj_reference }}" \
        --sample "{{ samples_list|join(',') }}" )

    mv {{ cellranger_out }}/all_contig_annotations.bed {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig_annotations.bed
    mv {{ cellranger_out }}/all_contig_annotations.csv {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig_annotations.csv
    mv {{ cellranger_out }}/all_contig_annotations.json {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig_annotations.json
    mv {{ cellranger_out }}/all_contig.bam {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig.bam
    mv {{ cellranger_out }}/all_contig.bam.bai {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig.bam.bai
    mv {{ cellranger_out }}/all_contig.fasta {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig.fasta
    mv {{ cellranger_out }}/all_contig.fasta.fai {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig.fasta.fai
    mv {{ cellranger_out }}/all_contig.fastq {{ outdir }}/{{ sample.name }}.cellranger_vdj.all_contig.fastq
    mv {{ cellranger_out }}/cell_barcodes.json {{ outdir }}/{{ sample.name }}.cellranger_vdj.cell_barcodes.json
    mv {{ cellranger_out }}/clonotypes.csv {{ outdir }}/{{ sample.name }}.cellranger_vdj.clonotypes.csv
    mv {{ cellranger_out }}/concat_ref.bam {{ outdir }}/{{ sample.name }}.cellranger_vdj.concat_ref.bam
    mv {{ cellranger_out }}/concat_ref.bam.bai {{ outdir }}/{{ sample.name }}.cellranger_vdj.concat_ref.bam.bai
    mv {{ cellranger_out }}/concat_ref.fasta {{ outdir }}/{{ sample.name }}.cellranger_vdj.concat_ref.fasta
    mv {{ cellranger_out }}/concat_ref.fasta.fai {{ outdir }}/{{ sample.name }}.cellranger_vdj.concat_ref.fasta.fai
    mv {{ cellranger_out }}/consensus_annotations.csv {{ outdir }}/{{ sample.name }}.cellranger_vdj.consensus_annotations.csv
    mv {{ cellranger_out }}/consensus.bam {{ outdir }}/{{ sample.name }}.cellranger_vdj.consensus.bam
    mv {{ cellranger_out }}/consensus.bam.bai {{ outdir }}/{{ sample.name }}.cellranger_vdj.consensus.bam.bai
    mv {{ cellranger_out }}/consensus.fasta {{ outdir }}/{{ sample.name }}.cellranger_vdj.consensus.fasta
    mv {{ cellranger_out }}/consensus.fasta.fai {{ outdir }}/{{ sample.name }}.cellranger_vdj.consensus.fasta.fai
    mv {{ cellranger_out }}/filtered_contig_annotations.csv {{ outdir }}/{{ sample.name }}.cellranger_vdj.filtered_contig_annotations.csv
    mv {{ cellranger_out }}/filtered_contig.fasta {{ outdir }}/{{ sample.name }}.cellranger_vdj.filtered_contig.fasta
    mv {{ cellranger_out }}/filtered_contig.fastq {{ outdir }}/{{ sample.name }}.cellranger_vdj.filtered_contig.fastq
    mv {{ cellranger_out }}/metrics_summary.csv {{ metrics_output }}
    mv {{ cellranger_out }}/vloupe.vloupe {{ outdir }}/{{ sample.name }}.cellranger_vdj.vloupe
    mv {{ cellranger_out }}/web_summary.html {{ outdir }}/stats/{{ sample.name }}.cellranger_vdj.bam.web_summary.html
    mv {{ cellranger_out }}/airr_rearrangement.tsv {{ outdir }}/{{ sample.name }}.cellranger_vdj.airr_rearrangement.tsv
    mv {{ cellranger_out }}/vdj_contig_info.pb {{ outdir }}/{{ sample.name }}.cellranger_vdj.vdj_contig_info.pb
    mv {{ cellranger_out }}/vdj_reference/fasta/donor_regions.fa {{ outdir }}/{{ sample.name }}.cellranger_vdj.donor_regions.fa
    mv {{ cellranger_out }}/vdj_reference/fasta/regions.fa {{ outdir }}/{{ sample.name }}.cellranger_vdj.regions.fa
    mv {{ cellranger_out }}/vdj_reference/reference.json {{ outdir }}/{{ sample.name }}.cellranger_vdj.reference.json

  {{- stats2json(sample.gltype, sample.name, task, metrics_output, json, "cellranger_vdj_metrics", sample_name=sample.name, library_name=sample.rglb) }}

{% endmacro %}
